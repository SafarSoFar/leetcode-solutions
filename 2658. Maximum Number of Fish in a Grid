class Solution {
public:
    int m = 0;
    int n = 0;
    vector<vector<int>> grid;
    int findMaxFish(vector<vector<int>>& grid) {
        this->m = grid.size();
        this->n = grid[0].size();
        this->grid = grid;
        int max = 0;
        vector<vector<bool>> vis(m, vector<bool>(n,false));
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(!vis[i][j] && grid[i][j] > 0){
                    int fishScore = 0;
                    dfs(i,j, fishScore, vis);
                    max = std::max(fishScore, max);
                }
            }
        }
        return max;
    }

    void dfs(int r, int c, int& fishScore, vector<vector<bool>>& vis){
        if(r < 0 || c < 0 || r >= m || c >= n || vis[r][c] || grid[r][c] == 0){
            return;
        }
        vis[r][c] = true;
        fishScore += grid[r][c];
        dfs(r+1, c, fishScore, vis);
        dfs(r-1, c, fishScore, vis);
        dfs(r, c+1, fishScore, vis);
        dfs(r, c-1, fishScore, vis);
    }
};
