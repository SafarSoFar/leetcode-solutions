class Solution {
public:
    long long ans = 0;
    long long maxSum(vector<vector<int>>& grid, vector<int>& limits, int k) {
        int n = grid.size();
        int m = grid[0].size();
        priority_queue< pair<int,int> > pq;
        for(int i = 0; i < n; i++){
            sort(grid[i].begin(), grid[i].end());
            for(int j = m-1; j >= m-limits[i]; j--){
                //std::cout<<grid[i][j]<<'\n';
                pair<int,int> pr = make_pair(grid[i][j], i);
                pq.push(pr);
            }
        }
        while(k != 0){
            if(limits[pq.top().second] > 0){
                long long ll = pq.top().first;
                ans += ll;
                limits[pq.top().second]--;
            }
            pq.pop();
            
            k--;
        }
        return ans;
        
    }
};
