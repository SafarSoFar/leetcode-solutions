/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minimumOperations(TreeNode* root) {
        queue<TreeNode*> q;
        q.push(root);
        int ans = 0;
        
        while(!q.empty()){
            int l = q.size();
            vector<int> vec;
            for(int i = 0; i < l; i++){
                TreeNode* cur = q.front();
                q.pop();
                vec.push_back(cur->val);
                if(cur->left){
                    q.push(cur->left);
                }
                if(cur->right){
                    q.push(cur->right);
                }
            }
            vector<int> sorted(vec.begin(), vec.end());
            std::sort(sorted.begin(), sorted.end());
            unordered_map<int,int> posMap;
            for(int i = 0; i < l; i++){
                posMap[vec[i]] = i;
            }

            for(int i = 0; i < l; i++){
              if(vec[i] != sorted[i]){
                int valInd = posMap[sorted[i]];
                std::swap(vec[i], vec[valInd]);
                posMap[vec[i]] = i;
                posMap[vec[valInd]] = valInd;
                ans++;
              }
            }     
        }
        return ans;
    }
};
