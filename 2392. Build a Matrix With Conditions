class Solution {
public:
    int k = 0;
    vector<vector<int>> buildMatrix(int k, vector<vector<int>>& rowConditions, vector<vector<int>>& colConditions) {
        this->k = k;
        vector<int> rowInDegree(k);
        vector<int> colInDegree(k);
        unordered_map<int,vector<int>> rowAdjMp;
        unordered_map<int,vector<int>> colAdjMp;
        vector<vector<int>> ans(k, vector<int>(k));
        for(int i = 0; i < rowConditions.size();i++){
            int v0 = rowConditions[i][0];
            int v1 = rowConditions[i][1];
            rowAdjMp[v0].push_back(v1);
            // 1-based input
            rowInDegree[v1-1]++;
        }
        vector<int> rowTopo = kahnAlgoBFS(rowAdjMp, rowInDegree);
        if(rowTopo.size() != k){
            return {};
        }
        for(int i = 0; i < colConditions.size();i++){
            int v0 = colConditions[i][0];
            int v1 = colConditions[i][1];
            colAdjMp[v0].push_back(v1);
            // 1-based input
            colInDegree[v1-1]++;
        }
        vector<int> colTopo = kahnAlgoBFS(colAdjMp, colInDegree);
        if(colTopo.size() != k){
            return {};
        }
        unordered_map<int,int> colValToIndex; 
        for(int i = 0; i < k; i++){
            colValToIndex[colTopo[i]] = i;
        }
        for(int i = 0; i < k; i++){
            int val = rowTopo[i];
            int j = colValToIndex[val];
            ans[i][j] = val;    

        }
        return ans;
    }


    vector<int> kahnAlgoBFS(unordered_map<int,vector<int>>& adjMp, vector<int>& inDegree){
        queue<int> q;
        vector<int> vec;
        for(int i = 0; i < k; i++){
            if(inDegree[i] == 0){
                q.push(i+1);
            }
        }
        while(q.size()){
            int cur = q.front();
            q.pop();
            vec.push_back(cur);
            for(auto & adjVal : adjMp[cur]){
                inDegree[adjVal-1]--;
                if(inDegree[adjVal-1] == 0){
                    q.push(adjVal);
                }
            }
        }
        return vec;
    }
};
