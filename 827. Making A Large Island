class Solution {
public:
    int n;
    int islandIndex = 0;
    unordered_map<int, int> mp;
    int largestIsland(vector<vector<int>>& grid) {
        this->n = grid.size();
        int ans = 0;
        vector<vector<int>> islandIndices(n, vector<int>(n, -1));
        for (int i = 0; i < this->n; i++) {
            for (int j = 0; j < this->n; j++) {
                if (grid[i][j] == 0) {
                    unordered_set<int> islandsUsed;
                    int cur = 1;
                    defineIsland(grid, islandIndices, i - 1, j);
                    defineIsland(grid, islandIndices, i + 1, j);
                    defineIsland(grid, islandIndices, i, j - 1);
                    defineIsland(grid, islandIndices, i, j + 1);

                    if (i - 1 >= 0) {
                        cur += mp[islandIndices[i - 1][j]];
                        islandsUsed.insert(islandIndices[i - 1][j]);
                    }
                    if (i + 1 < this->n &&
                        !islandsUsed.contains(islandIndices[i + 1][j])) {
                        cur += mp[islandIndices[i + 1][j]];
                        islandsUsed.insert(islandIndices[i + 1][j]);
                    }
                    if (j - 1 >= 0 &&
                        !islandsUsed.contains(islandIndices[i][j - 1])) {
                        cur += mp[islandIndices[i][j - 1]];
                        islandsUsed.insert(islandIndices[i][j - 1]);
                    }

                    if (j + 1 < this->n &&
                        !islandsUsed.contains(islandIndices[i][j + 1])) {
                        cur += mp[islandIndices[i][j + 1]];
                        islandsUsed.insert(islandIndices[i][j + 1]);
                    }
                    ans = std::max(ans, cur);
                }
            }
        }

        return ans == 0 ? n * n : ans;
    }

    void defineIsland(vector<vector<int>>& grid,
                      vector<vector<int>>& islandIndices, int i, int j) {
        if (i < 0 || j < 0 || i >= this->n || j >= this->n || grid[i][j] == 0 ||
            islandIndices[i][j] != -1) {
            return;
        }
        int islandCount = 0;
        dfs(grid, islandIndices, islandCount, i, j);
        mp[this->islandIndex] = islandCount;
        this->islandIndex++;
    }

    void dfs(vector<vector<int>>& grid, vector<vector<int>>& islandIndices,
             int& islandCount, int i, int j) {
        if (i < 0 || j < 0 || i >= this->n || j >= this->n || grid[i][j] == 0 ||
            islandIndices[i][j] != -1)
            return;

        islandCount++;
        islandIndices[i][j] = islandIndex;
        dfs(grid, islandIndices, islandCount, i - 1, j);
        dfs(grid, islandIndices, islandCount, i + 1, j);
        dfs(grid, islandIndices, islandCount, i, j + 1);
        dfs(grid, islandIndices, islandCount, i, j - 1);
    }
};
