class Trie{
public:

    unordered_map<char,Trie*> next;
    string word = "";
    //bool isWordEnd = false;
};

class Solution {
public:
    string replaceWords(vector<string>& dictionary, string sentence) {
        stringstream ss(sentence);       
        string word;      
        vector<string> words;   
        string ans = "";  
        while (getline(ss, word, ' ')) {        
            words.push_back(word);
        }

        Trie* root = new Trie();
        Trie* cur;
        for(int i = 0; i < dictionary.size(); i++){
            cur = root;
            for(int j = 0; j < dictionary[i].size();j++){
                if(!cur->next.contains(dictionary[i][j])){
                    Trie* t = new Trie();
                    cur->next[dictionary[i][j]] = t;
                }
                cur = cur->next[dictionary[i][j]];
                if(j == dictionary[i].size()-1)
                    cur->word = dictionary[i];

            }
        }
        for(int i = 0; i < words.size();i++){
            cur = root;
            string rootStr = "";
            for(int j = 0; j < words[i].size();j++){
                if(cur->next.contains(words[i][j])){
                    cur = cur->next[words[i][j]];
                    if(cur->word != ""){
                        if(rootStr == "")
                            rootStr = cur->word;
                        else
                            rootStr = std::min(cur->word,rootStr);
                    }
                        
                }
                else
                    break;
            }
            ans += rootStr == "" ? words[i] : rootStr;
            if(i < words.size()-1)
                ans += ' ';

        }

        return ans;
    }
};
