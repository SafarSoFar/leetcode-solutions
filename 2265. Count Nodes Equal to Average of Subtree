/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans = 0;
    int averageOfSubtree(TreeNode* root) {
        dfs(root);
        return ans;
    }

    pair<int,int> dfs(TreeNode* root){
        pair<int,int> p;
        p.first = 1;
        p.second = root->val;
        if(root->left){
            pair<int,int> leftP = dfs(root->left);
            p.first += leftP.first;
            p.second += leftP.second;
           
        }
        if(root->right){
            pair<int,int> rightP = dfs(root->right);
            p.first += rightP.first;
            p.second += rightP.second;
        }
            
        if(p.second / p.first == root->val)
            ans++;
        
        return p;
    }
};
