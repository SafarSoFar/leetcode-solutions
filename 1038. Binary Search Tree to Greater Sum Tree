/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void collectValsDfs(TreeNode* curNode, vector<int>& vals){
        vals.push_back(curNode->val);
        if(curNode->left)
            collectValsDfs(curNode->left, vals);
        if(curNode->right)
            collectValsDfs(curNode->right, vals);
    }
    void convertToGst(TreeNode* curNode, queue<int>& gtQ){
        if(curNode->right)
            convertToGst(curNode->right, gtQ);

        curNode->val = gtQ.front();
        gtQ.pop();
        
        if(curNode->left)
            convertToGst(curNode->left, gtQ);
        
        
    }
    TreeNode* bstToGst(TreeNode* root) {
        vector<int> valsV;
        collectValsDfs(root, valsV); 
        sort(valsV.begin(), valsV.end());
        queue<int> gtQ;
        int curSum = 0;
        for(int i = valsV.size()-1; i >= 0; i--){
            curSum += valsV[i];
            gtQ.push(curSum);
        }
        convertToGst(root, gtQ);
        return root;
    }
    
    

    
};
